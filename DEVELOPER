In order to work on and contribute to this project, you will need to fork all Savvato repositories to your
github account. You will also need angular-cli, and the ionic framework to be globally installed on your
system.

Before cloning your forked copies of the repositories, it would be best to create a bit of file structure.
Somewhere on your development machine, create a savvato directory. Inside of your savvato directory, create
a src directory. Inside of your src directory, create a second savvato directory. Inside of that savvato
directory, create a second src directory. Finally, inside of that src directory, create an angular directory.
With that accomplished, you should have a file structure that looks like the following:

savvato
    -src
        -savvato
            -src
                -angular

Inside of the angular directory, clone the savvato-javascript-services and techprofile-component repositories.
Inside of the top level src directory, clone the dtim-techprofile-api, dtim-mobile, and savvato-techprofile-
website repositories.

Finally you should have a file stucture like the following:

savvato
    -src
        -dtim-mobile
        -dtim-techprofile-api
        -savvato
            -src
                -angular
                    -savvato-javascript-services
                    -techprofile-component
        -savvato-techprofile-website

In order to get the project running, it is recommended to begin by building the savvato-javascript-services,
and techprofile-component first, then create your MySQL database, followed by starting up the dtim-techprofile-api,
and finally serving up the dtim-mobile and/or savvato-techprofile-website. The instructions for the setup of
these specific parts will be included in each of their DEVELOPER files.

For this component of the project, create a new dev branch.
Once you have a dev branch you can continue with the following instructions. 


New Droplet Setup Notes
-----------


-- CRON JOBS
There are at present two cron jobs, and you will need to do a 'crontab -e' to add the entries to run them. First thing to do, is when you edit the crontab, add an entry for the EASYAH_ENVIRONMENT variable. Just add 'EASYAH_ENVIRONMENT=[DEV|STAGING|PROD]' on one of the lines before the cron entries. Then you will need the following entries:

@reboot sh /home/quizki/src/eog-api/bin/onstartup.sh
0 8 * * * sh /home/quizki/src/eog-api/bin/create-backup-tar.sh


-- SSH ACCESS
You should only be accessing the droplet via an id_rsa key.


-- NETWORK FIREWALL
You will need to set up iptables. Use the following commands:

sudo iptables -P INPUT ACCEPT
sudo iptables -P FORWARD ACCEPT
sudo iptables -P OUTPUT ACCEPT
sudo iptables -A INPUT -i lo -j ACCEPT
sudo iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
sudo iptables -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
sudo iptables -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT    #NOTE this is here for the future. as of v0.0.15, there is no port 80 HTTP traffic
sudo iptables -A INPUT -p tcp -m tcp --dport 8080 -j ACCEPT
sudo iptables -A INPUT -j DROP

if you haven't already installed it, you will need to "sudo apt-get install iptables-persistent" to persist the iptables changes.

-- RUN THESE

sudo apt-get update
sudo apt-get upgrade

sudo adduser quizki --gecos "First Last,RoomNumber,WorkPhone,HomePhone" --disabled-password && echo "quizki:password" 
| sudo chpasswd && sudo adduser quizki sudo

mkdir /home/quizki/.ssh

# then log off, and, on localhost, run....
cat ~/.ssh/id_rsa.pub | ssh root@[your.ip.address.here] "cat >> ~/.ssh/authorized_keys"

# You should now be able to ssh as quizki@...
ssh quizki@[the.ip.address]

mkdir ~/apps

#INSTALL ORACLE JAVA
#  At present, there is no better way to install Oracle Java than to download it from Oracle, and then upload to the server. Tried to get the command line way working, and eventually, the command line was like making it pretty and gFTP uploading the file was like making it work. So..
#  Should be installed at ~/apps/java. For instance, ~/apps/java/bin should be a valid path. No symbolic links or directories named after the version number. Just ~/apps/java/bin

#SET JAVA_HOME
export JAVA_HOME=/home/quizki/apps/java
PATH="$JAVA_HOME/bin:$HOME/bin:$HOME/.local/bin:$PATH"


#INSTALL MYSQL
sudo apt install mysql-server

#SSH
Use gFTP or the like to copy id_rsa and id_rsa.pub to /home/quizki/.ssh

#INSTALL MAVEN
sudo apt install maven


-- DATABASE INITIAL SETUP
#MYSQL Auto-login file
If its not already present create a file like the following, and call it ~/.my.cnf

#--BEGIN--
[client]
user=springuser_XXXX
password=ThePassword
#--END--

- Use 'sudo mysql -u root -p' with the default password to login, create the initial user, database, and grant permissions.

    CREATE DATABASE dtim_db;
    CREATE USER 'springuser_dtim'@'localhost' IDENTIFIED BY 'ThePassword';
    GRANT ALL ON dtim_db.* TO 'springuser_dtim'@'localhost';


-- DATABASE MIGRATIONS
These are handled by Liquibase, each time our server starts. Define new migrations in the Resources folder. Add to the master.XML file, and there you go.

-- REFRESHING THE DATABASE
You should be able to just drop dtim_db, and restart the server. Liquibase migrations should run and rebuild it all for you.

-- STARTING UP THE BACKEND
You should now be able to run the followed command

mvn spring-boot:run